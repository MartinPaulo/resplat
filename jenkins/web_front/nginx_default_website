##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

### Reference: https://mozilla.github.io/server-side-tls/ssl-config-generator/


# Default server configuration
#
server {
	listen 80;
	listen [::]:80;

	# Redirect all http requests to https
	return 301 https://$host$request_uri;
}

server {
	# SSL configuration
	#
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	ssl_certificate /etc/ssl/certs/reporting_cloud_unimelb_edu_au-bundle.crt;
	ssl_certificate_key /etc/ssl/private/reporting_cloud_unimelb_edu_au.key;
	ssl_session_timeout 1d;
	ssl_session_cache shared:SSL:50m;
	ssl_session_tickets off;
	# https://michael.lustfield.net/nginx/getting-a-perfect-ssl-labs-score	
	ssl_ecdh_curve secp384r1;

	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	gzip off;

	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	## Modern configuration. See ssl-config-generator
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
	ssl_prefer_server_ciphers on;

	## HSTS
	add_header Strict-Transport-Security max-age=15768000;
	add_header X-Frame-Options DENY;
	add_header X-Content-Type-Options nosniff;

	# OCSP Stapling ---
	# fetch OCSP records from URL in ssl_certificate and cache them
	ssl_stapling on;
	ssl_stapling_verify on;

	## verify chain of trust of OCSP response using Root CA and Intermediate certs
	ssl_trusted_certificate /etc/ssl/certs/QuoVadis_Root_CA_2_G3.crt;

	resolver 8.8.8.8 8.8.4.4 valid=300s;
	resolver_timeout 5s;

	ssl_dhparam /etc/ssl/certs/dhparam.pem;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		include proxy_params;
		include proxy_pass/root_pass.conf;
		proxy_read_timeout 90s;
		proxy_redirect default;

		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		#try_files $uri $uri/ =404;
	}

}

